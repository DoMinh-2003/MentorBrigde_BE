package com.BE.service;


import com.BE.model.entity.User;
import com.BE.repository.UserRepository;
import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.MACSigner;
import com.nimbusds.jose.crypto.MACVerifier;
import com.nimbusds.jwt.JWTClaimsSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.time.temporal.ChronoUnit;


import java.text.ParseException;
import java.time.Instant;
import java.util.Date;

@Service
public class JWTService {
    @Value("${spring.secretkey}")
    private String SECRET_KEY;

    @Value("${spring.duration}")
    private long DURATION;
    

    @Autowired
    UserRepository userRepository;

    @Autowired
    RefreshTokenService refreshTokenService;



    public String generateToken(User user, String refresh, boolean isRefresh) {
        JWSHeader header = new JWSHeader(JWSAlgorithm.HS512);

        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder()
                .subject(user.getUsername())
                .issueTime(Date.from(Instant.now()))
                .expirationTime(Date.from(Instant.now().plus(DURATION, ChronoUnit.SECONDS)))
                .claim("scope", "ROLE_" + user.getRole())
                .claim("refresh", refresh)
                .build();

        if(!isRefresh){
            refreshTokenService.saveRefreshToken(refresh,user.getId());
        }

        Payload payload = new Payload(jwtClaimsSet.toJSONObject());

        JWSObject jwsObject = new JWSObject(header, payload);

        try {
            jwsObject.sign(new MACSigner(SECRET_KEY.getBytes()));
            return jwsObject.serialize();
        } catch (JOSEException e) {
            throw new RuntimeException(e);
        }
    }


    public String generateToken(User user) {

        JWSHeader header = new JWSHeader(JWSAlgorithm.HS512);

        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder()
                .subject(user.getUsername())
                .issueTime(Date.from(Instant.now()))
                .expirationTime(Date.from(Instant.now().plus(DURATION, ChronoUnit.SECONDS)))
                .claim("scope", "ROLE_" + user.getRole())
                .build();

        Payload payload = new Payload(jwtClaimsSet.toJSONObject());

        JWSObject jwsObject = new JWSObject(header, payload);

        try {
            jwsObject.sign(new MACSigner(SECRET_KEY.getBytes()));
            return jwsObject.serialize();
        } catch (JOSEException e) {
            throw new RuntimeException(e);
        }
    }
    public User getUserByToken(String token) {
        try {
            // Giải mã token
            JWSObject jwsObject = JWSObject.parse(token);

            // Xác minh chữ ký của token
            MACVerifier verifier = new MACVerifier(SECRET_KEY.getBytes());
            if (!jwsObject.verify(verifier)) {
                throw new RuntimeException("Invalid token signature");
            }

            // Lấy thông tin từ claims
            JWTClaimsSet claimsSet = JWTClaimsSet.parse(jwsObject.getPayload().toJSONObject());
            String username = claimsSet.getSubject();

            // Tìm người dùng trong cơ sở dữ liệu bằng tên đăng nhập
            return userRepository.findByUsername(username).orElse(null); // Cần có phương thức này trong UserRepository
        } catch (ParseException | JOSEException e) {
            throw new RuntimeException("Error parsing token", e);
        }
    }

    public String getRefreshClaim(String token) {
        try {
            JWSObject jwsObject = JWSObject.parse(token);

            MACVerifier verifier = new MACVerifier(SECRET_KEY.getBytes());
            if (!jwsObject.verify(verifier)) {
                throw new RuntimeException("Invalid token signature");
            }
            JWTClaimsSet claimsSet = JWTClaimsSet.parse(jwsObject.getPayload().toJSONObject());

            return claimsSet.getStringClaim("refresh");
        } catch (ParseException | JOSEException e) {
            throw new RuntimeException("Error parsing token", e);
        }
    }



    }






